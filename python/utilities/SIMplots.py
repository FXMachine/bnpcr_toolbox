# Autogenerated with SMOP version 
# /usr/local/bin/smop SIMplots.m -o ../../python/utilities/SIMplots.py

from __future__ import division
try:
    from runtime import *
except ImportError:
    from smop.runtime import *

latent_mean=settings.latent_mean
inds2impute=settings.inds2impute
sampleEvery=copy_(storeEvery)
var_mean=zeros(p,p,N)
var_var=zeros(p,p,N)
var_u=zeros(p,p,N)
var_l=zeros(p,p,N)
mu_mean=zeros(p,N)
mu_var=zeros(p,N)
mu_u=zeros(p,N)
mu_l=zeros(p,N)
cov_true=true_params.cov_true
mu_true=true_params.mu
for tt in arange_(1,N).reshape(-1):
    theta_zeta_tt=zeros(p,k,(Niter - Nburn) / sampleEvery)
    var_tt=zeros(p,p,(Niter - Nburn) / sampleEvery)
    mu_tt=zeros(p,(Niter - Nburn) / sampleEvery)
    m=1
    for nn in arange_(Nburn + 1,Niter,sampleEvery).reshape(-1):
        n=nn + saveEvery - 1
        if rem(n,saveEvery) == 0 and n <= Niter:
            filename=[saveDir,char('/BNP_covreg_statsiter'),num2str(n),char('trial'),num2str(trial),char('.mat')]
            load(filename)
            store_count=1
        theta_zeta_tt[arange_(),arange_(),m]=Stats(store_count).theta * Stats(store_count).zeta(arange_(),arange_(),tt)
        var_tt[arange_(),arange_(),m]=Stats(store_count).theta * Stats(store_count).zeta(arange_(),arange_(),tt) * Stats(store_count).zeta(arange_(),arange_(),tt).T * Stats(store_count).theta.T + diag(1.0 / Stats(store_count).invSig_vec)
        mu_tt[arange_(),m]=Stats(store_count).theta * Stats(store_count).zeta(arange_(),arange_(),tt) * Stats(store_count).psi(arange_(),tt)
        m=m + 1
        store_count=store_count + 1
    var_mean[arange_(),arange_(),tt]=mean(var_tt,3)
    var_var[arange_(),arange_(),tt]=var(var_tt,0,3)
    mu_mean[arange_(),tt]=mean(mu_tt,2)
    mu_var[arange_(),tt]=var(mu_tt,0,2)
    for pp in arange_(1,p).reshape(-1):
        for jj in arange_(pp,p).reshape(-1):
            var_u(pp,jj,tt),var_l(pp,jj,tt)=calculate_hpd(var_tt(pp,jj,arange_()),0.95,nargout=2)
        if latent_mean:
            mu_u(pp,tt),mu_l(pp,tt)=calculate_hpd(mu_tt(pp,arange_()),0.95,nargout=2)
    if not rem(tt,100):
        display(num2str(tt))
LineWidth=1.5
fs=20
figure
for pp in arange_(1,p).reshape(-1):
    for jj in arange_(pp,p).reshape(-1):
        plot(squeeze(var_mean(pp,jj,arange_())),char('LineWidth'),LineWidth)
        hold(char('all'))
xlim([0,N])
ylabel(char('Variance/Covariance'),char('FontSize'),fs)
xlabel(char('Time'),char('FontSize'),fs)
_set(gca,char('FontSize'),16)
ylim([- 2,2])
title(char('BNP Covariance Regression'),char('Fontsize'),20)
figure
for pp in arange_(1,p).reshape(-1):
    for jj in arange_(pp,p).reshape(-1):
        plot(squeeze(true_params.cov_true(pp,jj,arange_())),char('LineWidth'),LineWidth)
        hold(char('all'))
xlim([0,N])
ylabel(char('Variance/Covariance'),char('FontSize'),fs)
xlabel(char('Time'),char('FontSize'),fs)
_set(gca,char('FontSize'),16)
ylim([- 2,2])
title(char('Truth'),char('FontSize'),20)
LineWidth=1.5
figure
for pp in arange_(1,p).reshape(-1):
    plot(mu_mean(pp,arange_()),char('LineWidth'),LineWidth)
    hold(char('all'))
xlim([0,N])
ylabel(char('Mean'),char('FontSize'),fs)
xlabel(char('Time'),char('FontSize'),fs)
_set(gca,char('FontSize'),16)
title(char('BNP Covariance Regression'),char('Fontsize'),20)
figure
for pp in arange_(1,p).reshape(-1):
    plot(true_params.mu(pp,arange_()),char('LineWidth'),LineWidth)
    hold(char('all'))
xlim([0,N])
ylabel(char('Mean'),char('FontSize'),fs)
xlabel(char('Time'),char('FontSize'),fs)
_set(gca,char('FontSize'),16)
title(char('Truth'),char('FontSize'),20)
ylim([- 3,3])
fs=20
Sig_vec=true_params.Sig_vec
theta=true_params.theta
ind_start=1
ind_end=copy_(nmc)
inds=[arange_(1,N)]
if strcmp(reg_flag,char('full')):
    figure
    hl=boxplot(1.0 / invSig_hist(arange_(),[arange_(ind_start,ind_end)]).T,char('notch'),char('on'),char('widths'),0.75,char('outliersize'),2)
    for ih in arange_(1,size(hl,1)).reshape(-1):
        _set(hl(ih,arange_()),char('LineWidth'),2)
    hold(char('on'))
    scatter([arange_(1,p)],Sig_vec,75,char('go'),char('filled'))
    hold(char('off'))
    ylabel(char('\\Sigma_{0,p}'),char('FontSize'),20)
    xlabel(char('p'),char('FontSize'),20)
    _set(gca(),char('FontSize'),16)
cov_true=true_params.cov_true
figure
for pp in arange_(1,p).reshape(-1):
    for jj in arange_(1,pp).reshape(-1):
        plot(squeeze(var_l(pp,jj,arange_())),char('--'),char('LineWidth'),2)
        hold(char('on'))
        plot(squeeze(var_u(pp,jj,arange_())),char('--'),char('LineWidth'),2)
        plot(squeeze(var_mean(pp,jj,arange_())),char('LineWidth'),2)
        plot(squeeze(cov_true(pp,jj,arange_())),char('r'),char('LineWidth'),2)
        hold(char('off'))
        xlim([0,N])
        axis(char('tight'))
        axis(char('square'))
        box(char('on'))
        _set(gca(),char('XTickLabel'),char(''),char('XTick'),zeros(1,0),char('YTickLabel'),char(''),char('YTick'),zeros(1,0),char('DataAspectRatio'),[10,_max(_abs(cov_true(pp,jj,arange_()))),1])
        title([char('p: '),num2str(pp),char(','),num2str(jj)])
        waitforbuttonpress
mu_true=true_params.mu
figure
for pp in arange_(1,p).reshape(-1):
    plot(mu_l(pp,arange_()),char('--'),char('LineWidth'),2)
    hold(char('on'))
    plot(mu_u(pp,arange_()),char('--'),char('LineWidth'),2)
    plot(mu_mean(pp,arange_()),char('LineWidth'),2)
    plot(mu_true(pp,arange_()),char('r'),char('LineWidth'),2)
    hold(char('off'))
    xlim([0,N])
    axis(char('tight'))
    axis(char('square'))
    box(char('on'))
    _set(gca(),char('XTickLabel'),char(''),char('XTick'),zeros(1,0),char('YTickLabel'),char(''),char('YTick'),zeros(1,0),char('DataAspectRatio'),[10,_max(_abs(cov_true(pp,jj,arange_()))),1])
    title([char('p: '),num2str(pp),char(','),num2str(jj)])
    waitforbuttonpress
